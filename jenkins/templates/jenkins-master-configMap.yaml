---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "jenkins-master-%s" .Release.Name | trunc 63 }}
data:
  credentials.groovy: |
    import com.cloudbees.plugins.credentials.impl.*;
    import com.cloudbees.plugins.credentials.*;
    import com.cloudbees.plugins.credentials.domains.*;
    Credentials c = (Credentials) new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL,"docker-login", "public docker hub account", "{{ .Values.configMap.dockerHub.username }}", "{{ .Values.configMap.dockerHub.password }}")
    SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), c)
  kubernetes.groovy: |
    import jenkins.model.Jenkins
    import org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud

    def env = System.getenv()

    def kubernetesCloud = Jenkins.instance.clouds.find { it.getDisplayName() == "kubernetes" }
    if (kubernetesCloud == null)
    {
      println('--> creating default KubernetesCloud')
      kubernetesCloud = new KubernetesCloud("kubernetes")
      Jenkins.instance.clouds.add(kubernetesCloud)
    }
    else
    {
      println "--> found $kubernetesCloud"
    }

    kubernetesCloud.setNamespace(env['KUBERNETES_CLOUD_NAMESPACE'] ?: 'default')
    kubernetesCloud.setJenkinsUrl(env['KUBERNETES_CLOUD_JENKINS_URL'] ?: 'http://{{ template "jenkins.service.name" . }}.default.svc.cluster.local:8080')
    kubernetesCloud.setServerUrl(env['KUBERNETES_CLOUD_SERVER'] ?: 'https://kubernetes.default.svc.cluster.local')
    kubernetesCloud.setContainerCapStr(env['KUBERNETES_CLOUD_CONTAINER_CAP'] ?: '100')

    Jenkins.instance.save()
