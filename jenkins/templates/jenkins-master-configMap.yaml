---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ printf "jenkins-master-%s" .Release.Name | trunc 63 }}
data:
  create-seed-job.groovy: |
    import jenkins.model.*
    import java.io.*
    import hudson.cli.BuildCommand

    def jobNames = Jenkins.instance.getJobNames()

    def seedjob = "seed-job"

    if (! jobNames.contains(seedjob)) {

      def configXml = '''
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.10">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.30">
          <scm class="hudson.plugins.git.GitSCM" plugin="git@3.3.0">
            <configVersion>2</configVersion>
            <userRemoteConfigs>
              <hudson.plugins.git.UserRemoteConfig>
                <url>{{ .Values.jobs.seed }}</url>
              </hudson.plugins.git.UserRemoteConfig>
            </userRemoteConfigs>
            <branches>
              <hudson.plugins.git.BranchSpec>
                <name>*/master</name>
              </hudson.plugins.git.BranchSpec>
            </branches>
            <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
            <submoduleCfg class="list"/>
            <extensions/>
          </scm>
          <scriptPath>Jenkinsfile</scriptPath>
          <lightweight>true</lightweight>
        </definition>
        <triggers/>
      </flow-definition>'''


      configXml = configXml.trim().replaceFirst("^([\\W]+)<","<")

      def xmlStream = new ByteArrayInputStream( configXml.getBytes() )

      Jenkins.instance.createProjectFromXML(seedjob, xmlStream).scheduleBuild(0, new BuildCommand.CLICause())

    }
  credentials.groovy: |
    import jenkins.model.*
    import com.cloudbees.plugins.credentials.*
    import com.cloudbees.plugins.credentials.impl.*
    import com.cloudbees.plugins.credentials.common.*
    import com.cloudbees.plugins.credentials.domains.*
    import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl

    def changePassword = { username, new_password, id, description ->
        def creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(
            com.cloudbees.plugins.credentials.common.StandardUsernameCredentials.class,
            jenkins.model.Jenkins.instance
        )

        def result = null
        def c = creds.findResult { it.username == username ? it : null }
        def credentials_store = jenkins.model.Jenkins.instance.getExtensionList(
            'com.cloudbees.plugins.credentials.SystemCredentialsProvider'
            )[0].getStore()


        if ( c ) {
            println "found credential ${c.id} for username ${c.username}"
            result = credentials_store.updateCredentials(
                com.cloudbees.plugins.credentials.domains.Domain.global(), 
                c, 
                new UsernamePasswordCredentialsImpl(c.scope, c.id, c.description, c.username, new_password)
                )

        } else {
            println "creating credential for ${username}"
            result = credentials_store.addCredentials(
                com.cloudbees.plugins.credentials.domains.Domain.global(), 
                new UsernamePasswordCredentialsImpl( com.cloudbees.plugins.credentials.CredentialsScope.GLOBAL, id, description, username, new_password)
            )
        }

        if (result) {
            println "password changed for ${username}" 
        } else {
            println "failed to change password for ${username}"
        }
    }

    changePassword("{{ .Values.configMap.dockerHub.username }}", "{{ .Values.configMap.dockerHub.password }}", "docker-login", "public docker hub account")
  kubernetes.groovy: |
    import jenkins.model.Jenkins
    import org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud

    def env = System.getenv()

    def kubernetesCloud = Jenkins.instance.clouds.find { it.getDisplayName() == "kubernetes" }
    if (kubernetesCloud == null)
    {
      println('--> creating default KubernetesCloud')
      kubernetesCloud = new KubernetesCloud("kubernetes")
      Jenkins.instance.clouds.add(kubernetesCloud)
    }
    else
    {
      println "--> found $kubernetesCloud"
    }

    kubernetesCloud.setNamespace(env['KUBERNETES_CLOUD_NAMESPACE'] ?: 'default')
    kubernetesCloud.setJenkinsUrl(env['KUBERNETES_CLOUD_JENKINS_URL'] ?: 'http://{{ template "jenkins.service.name" . }}.default.svc.cluster.local:8080')
    kubernetesCloud.setServerUrl(env['KUBERNETES_CLOUD_SERVER'] ?: 'https://kubernetes.default.svc.cluster.local')
    kubernetesCloud.setContainerCapStr(env['KUBERNETES_CLOUD_CONTAINER_CAP'] ?: '100')

    Jenkins.instance.save()
