{{- $relname := .Release.Name -}}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
  labels:
{{ include "labels" . | indent 4 }}
data:
  global-envs.groovy: |
    import jenkins.model.Jenkins
    
    instance = Jenkins.getInstance()
    globalNodeProperties = instance.getGlobalNodeProperties()
    envVarsNodePropertyList = globalNodeProperties.getAll(hudson.slaves.EnvironmentVariablesNodeProperty.class)

    newEnvVarsNodeProperty = null
    envVars = null

    if ( envVarsNodePropertyList == null || envVarsNodePropertyList.size() == 0 ) {
      newEnvVarsNodeProperty = new hudson.slaves.EnvironmentVariablesNodeProperty()
      globalNodeProperties.add(newEnvVarsNodeProperty)
      envVars = newEnvVarsNodeProperty.getEnvVars()
      
    } else {
      envVars = envVarsNodePropertyList.get(0).getEnvVars()
    }

    {{- range .Values.envs }}
    envVars.put('{{ .name }}', '{{ .value }}')
    {{- end}}
    {{- range .Values.caches }}
    envVars.put('{{ .name | replace "-" "_" | upper }}', '{{ .name }}-{{ $relname }}')
    {{- end}}
    
    instance.save()
  basic-security.groovy: |
    import hudson.security.*
    import jenkins.model.*
    import jenkins.security.s2m.AdminWhitelistRule

    // Enable Slave -> Master Access Control
    Jenkins.instance.injector.getInstance(AdminWhitelistRule.class).setMasterKillSwitch(false);
    Jenkins.instance.save()

    def env = System.getenv()
    def instance = Jenkins.getInstance()

    println "--> Checking if security has been set already"

    if (!instance.isUseSecurity()) {
        println "--> creating local user admin"

        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        hudsonRealm.createAccount('{{ .Values.adminUser }}','{{ .Values.adminPasswd }}')
        instance.setSecurityRealm(hudsonRealm)

        def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
        instance.setAuthorizationStrategy(strategy)
        strategy.setAllowAnonymousRead(false)

        instance.save()
    }
  create-users.groovy: |
    import hudson.model.*
    import hudson.security.*
    import jenkins.security.*
    import jenkins.model.*

    def instance = Jenkins.getInstance()

    if (instance.getSecurityRealm() instanceof HudsonPrivateSecurityRealm) {
      def hudsonSecurity = (HudsonPrivateSecurityRealm)instance.getSecurityRealm()
      
      // create users
      {{- range .Values.users }}
      hudsonSecurity.createAccount('{{ .name }}', '{{ .passwd }}')
      {{- end}}

    }

    instance.save()
  create-seed-job.groovy: |
    import jenkins.model.*
    import java.io.*
    import hudson.cli.BuildCommand
    import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
    import com.cloudbees.plugins.credentials.*

    /* def retries = 10
    while(CredentialsProvider.lookupCredentials(BasicSSHUserPrivateKey.class, Jenkins.instance)
      .findResult { it.getId() == '{{ .Values.seedjob.credentials }}' ? false : true } && retries > 0 ) {
      retries--
      println("{{ .Values.seedjob.credentials }} not exist.")
      println("${retries} times to retry")
      sleep 3000
    }
    */

    def jobNames = Jenkins.instance.getJobNames()

    def seedjob = "seed-job"

    if (! jobNames.contains(seedjob)) {

      def configXml = '''
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.10">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.30">
          <scm class="hudson.plugins.git.GitSCM" plugin="git@3.3.0">
            <configVersion>2</configVersion>
            <userRemoteConfigs>
              <hudson.plugins.git.UserRemoteConfig>
                <url>{{ .Values.seedjob.url }}</url>
                <credentialsId>{{ .Values.seedjob.credentials }}</credentialsId>
              </hudson.plugins.git.UserRemoteConfig>
            </userRemoteConfigs>
            <branches>
              <hudson.plugins.git.BranchSpec>
                <name>*/master</name>
              </hudson.plugins.git.BranchSpec>
            </branches>
            <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
            <submoduleCfg class="list"/>
            <extensions/>
          </scm>
          <scriptPath>Jenkinsfile</scriptPath>
          <lightweight>true</lightweight>
        </definition>
        <triggers/>
      </flow-definition>'''


      configXml = configXml.trim().replaceFirst("^([\\W]+)<","<")

      def xmlStream = new ByteArrayInputStream(configXml.getBytes())

      def proj = Jenkins.instance.createProjectFromXML(seedjob, xmlStream)
      // proj.scheduleBuild(0, new BuildCommand.CLICause())

    }

  credentials.groovy: |
    import jenkins.model.*
    import com.cloudbees.plugins.credentials.*
    import com.cloudbees.plugins.credentials.impl.*
    import com.cloudbees.plugins.credentials.common.*
    import com.cloudbees.plugins.credentials.domains.*
    import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
    import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
    import hudson.plugins.sshslaves.*;

    
    def addOrUpdateCredentials = { credentials, clazz ->

      global_domain = com.cloudbees.plugins.credentials.domains.Domain.global()
      credentials_store = jenkins.model.Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

      creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(clazz,jenkins.model.Jenkins.instance)
      exist = creds.findResult { it.getId() == credentials.getId() ? it : null }

      if (exist) {
        result = credentials_store.updateCredentials(global_domain, exist, credentials)
      }
      else {
        println "creating credential for ${credentials.getId()}"
        result = credentials_store.addCredentials(global_domain, credentials)
      }

      if (result) {
        println "${credentials.getId()} updated" 
      } 
      else {
        println "failed to change credentials for ${credentials.getId()}"
      }

    }

    gitlab = new BasicSSHUserPrivateKey(CredentialsScope.GLOBAL,
          '{{ required "A valid .Values.gitlab.credentialsId entry required!" .Values.gitlab.credentialsId }}',
          '{{ required "A valid .Values.gitlab.username entry required!" .Values.gitlab.username }}',
          new BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource('/var/jenkins_home/.ssh/{{ .Values.gitlab.name }}'),
          '{{ .Values.gitlab.passphrase }}',
          'gitlab scm account'
        )
    addOrUpdateCredentials(gitlab, BasicSSHUserPrivateKey.class)

    dockerRegistry = new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, 
      'docker-login', 
      'docker registry account', 
      '{{ required "A valid .Values.dockerRegistry.username entry required!" .Values.dockerRegistry.username }}', 
      '{{ required "A valid .Values.dockerRegistry.password entry required!" .Values.dockerRegistry.password }}')
    addOrUpdateCredentials(dockerRegistry, StandardUsernameCredentials.class)

    helmRepo = new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, 
      'helm-repo-credential', 
      'helm repo account', 
      '{{ required "A valid .Values.helmRepo.username entry required!" .Values.helmRepo.username }}', 
      '{{ required "A valid .Values.helmRepo.password entry required!" .Values.helmRepo.password }}')
    addOrUpdateCredentials(helmRepo, StandardUsernameCredentials.class)

  kubernetes.groovy: |
    import jenkins.model.Jenkins
    import org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud

    def env = System.getenv()

    def kubernetesCloud = Jenkins.instance.clouds.find { it.getDisplayName() == "kubernetes" }
    if (kubernetesCloud == null)
    {
      println('--> creating default KubernetesCloud')
      kubernetesCloud = new KubernetesCloud("kubernetes")
      Jenkins.instance.clouds.add(kubernetesCloud)
    }
    else
    {
      println "--> found $kubernetesCloud"
    }

    kubernetesCloud.setNamespace(env['KUBERNETES_CLOUD_NAMESPACE'] ?: 'default')
    kubernetesCloud.setJenkinsUrl(env['KUBERNETES_CLOUD_JENKINS_URL'] ?: 'http://{{ template "fullname" . }}.default.svc.cluster.local:{{ .Values.service.http.port }}')
    kubernetesCloud.setServerUrl(env['KUBERNETES_CLOUD_SERVER'] ?: 'https://kubernetes.default.svc.cluster.local')
    kubernetesCloud.setContainerCapStr(env['KUBERNETES_CLOUD_CONTAINER_CAP'] ?: '100')

    Jenkins.instance.save()
