---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "fullname" . }}
data:
  {{ required "A valid .Values.gitlab.name entry required!" .Values.gitlab.name }}: |-
{{ required "A valid .Values.gitlab.key entry required!" .Values.gitlab.key | indent 4 }}
  create-seed-job.groovy: |
    import jenkins.model.*
    import java.io.*
    import hudson.cli.BuildCommand

    def jobNames = Jenkins.instance.getJobNames()

    def seedjob = "seed-job"

    if (! jobNames.contains(seedjob)) {

      def configXml = '''
      <?xml version='1.0' encoding='UTF-8'?>
      <flow-definition plugin="workflow-job@2.10">
        <actions/>
        <description></description>
        <keepDependencies>false</keepDependencies>
        <properties>
          <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
            <triggers/>
          </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
        </properties>
        <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.30">
          <scm class="hudson.plugins.git.GitSCM" plugin="git@3.3.0">
            <configVersion>2</configVersion>
            <userRemoteConfigs>
              <hudson.plugins.git.UserRemoteConfig>
                <url>{{ .Values.seedjob.url }}</url>
                <credentialsId>{{ .Values.seedjob.credentials }}</credentialsId>
              </hudson.plugins.git.UserRemoteConfig>
            </userRemoteConfigs>
            <branches>
              <hudson.plugins.git.BranchSpec>
                <name>*/master</name>
              </hudson.plugins.git.BranchSpec>
            </branches>
            <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
            <submoduleCfg class="list"/>
            <extensions/>
          </scm>
          <scriptPath>Jenkinsfile</scriptPath>
          <lightweight>true</lightweight>
        </definition>
        <triggers/>
      </flow-definition>'''


      configXml = configXml.trim().replaceFirst("^([\\W]+)<","<")

      def xmlStream = new ByteArrayInputStream( configXml.getBytes() )

      Jenkins.instance.createProjectFromXML(seedjob, xmlStream).scheduleBuild(0, new BuildCommand.CLICause())

    }
  credentials.groovy: |
    import jenkins.model.*
    import com.cloudbees.plugins.credentials.*
    import com.cloudbees.plugins.credentials.impl.*
    import com.cloudbees.plugins.credentials.common.*
    import com.cloudbees.plugins.credentials.domains.*
    import com.cloudbees.plugins.credentials.impl.UsernamePasswordCredentialsImpl
    import com.cloudbees.jenkins.plugins.sshcredentials.impl.*
    import com.cloudbees.jenkins.plugins.sshcredentials.impl.*;
    import hudson.plugins.sshslaves.*;

    
    def addOrUpdateCredentials = { credentials, clazz ->

      global_domain = com.cloudbees.plugins.credentials.domains.Domain.global()
      credentials_store = jenkins.model.Jenkins.instance.getExtensionList('com.cloudbees.plugins.credentials.SystemCredentialsProvider')[0].getStore()

      creds = com.cloudbees.plugins.credentials.CredentialsProvider.lookupCredentials(clazz,jenkins.model.Jenkins.instance)
      exist = creds.findResult { it.getId() == credentials.getId() ? it : null }

      if (exist) {
        result = credentials_store.updateCredentials(global_domain, exist, credentials)
      }
      else {
        println "creating credential for ${credentials.getId()}"
        result = credentials_store.addCredentials(global_domain, credentials)
      }

      if (result) {
        println "${credentials.getId()} updated" 
      } 
      else {
        println "failed to change credentials for ${credentials.getId()}"
      }

    }

    gitlab = new BasicSSHUserPrivateKey(CredentialsScope.GLOBAL,
          '{{ required "A valid .Values.gitlab.credentialsId entry required!" .Values.gitlab.credentialsId }}',
          '{{ required "A valid .Values.gitlab.username entry required!" .Values.gitlab.username }}',
          new BasicSSHUserPrivateKey.FileOnMasterPrivateKeySource('/var/jenkins_home/.ssh/{{ .Values.gitlab.name }}'),
          '{{ .Values.gitlab.passphrase }}',
          'gitlab scm account'
        )
    addOrUpdateCredentials(gitlab, BasicSSHUserPrivateKey.class)

    dockerHub = new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, 
      'docker-login', 
      'public docker hub account', 
      '{{ required "A valid .Values.dockerHub.username entry required!" .Values.dockerHub.username }}', 
      '{{ required "A valid .Values.dockerHub.password entry required!" .Values.dockerHub.password }}')
    addOrUpdateCredentials(dockerHub, StandardUsernameCredentials.class)

    helmRepo = new UsernamePasswordCredentialsImpl(CredentialsScope.GLOBAL, 
      'helm-repo-credential', 
      'helm repo account', 
      '{{ required "A valid .Values.helmRepo.username entry required!" .Values.helmRepo.username }}', 
      '{{ required "A valid .Values.helmRepo.password entry required!" .Values.helmRepo.password }}')
    addOrUpdateCredentials(helmRepo, StandardUsernameCredentials.class)

  kubernetes.groovy: |
    import jenkins.model.Jenkins
    import org.csanchez.jenkins.plugins.kubernetes.KubernetesCloud

    def env = System.getenv()

    def kubernetesCloud = Jenkins.instance.clouds.find { it.getDisplayName() == "kubernetes" }
    if (kubernetesCloud == null)
    {
      println('--> creating default KubernetesCloud')
      kubernetesCloud = new KubernetesCloud("kubernetes")
      Jenkins.instance.clouds.add(kubernetesCloud)
    }
    else
    {
      println "--> found $kubernetesCloud"
    }

    kubernetesCloud.setNamespace(env['KUBERNETES_CLOUD_NAMESPACE'] ?: 'default')
    kubernetesCloud.setJenkinsUrl(env['KUBERNETES_CLOUD_JENKINS_URL'] ?: 'http://{{ template "fullname" . }}.default.svc.cluster.local:{{ .Values.service.http.port }}')
    kubernetesCloud.setServerUrl(env['KUBERNETES_CLOUD_SERVER'] ?: 'https://kubernetes.default.svc.cluster.local')
    kubernetesCloud.setContainerCapStr(env['KUBERNETES_CLOUD_CONTAINER_CAP'] ?: '100')

    Jenkins.instance.save()
